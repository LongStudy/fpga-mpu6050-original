--alt_mac_mult DATAA_CLEAR="A_0" DATAA_CLOCK="A_0" DATAA_WIDTH=11 DATAB_CLEAR="A_0" DATAB_CLOCK="A_0" DATAB_WIDTH=9 MULT_CLEAR="NONE" MULT_CLOCK="NONE" MULT_INPUT_A_IS_CONSTANT="NO" MULT_INPUT_B_IS_CONSTANT="NO" MULT_PIPELINE=0 MULT_REPRESENTATION_A="UNSIGNED" MULT_REPRESENTATION_B="UNSIGNED" OUTPUT_CLEAR="NONE" OUTPUT_CLOCK="NONE" OUTPUT_WIDTH=20 SIGNA_CLEAR="NONE" SIGNA_CLOCK="NONE" SIGNB_CLEAR="NONE" SIGNB_CLOCK="NONE" aclr(gnd) clk dataa datab dataout ena(vcc) signa signb CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Cyclone IV E"
--VERSION_BEGIN 13.1 cbx_alt_mac_mult 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION mult_3pl (dataa[10..0], datab[8..0])
RETURNS ( result[19..0]);

--synthesis_resources = lut 144 reg 20 
SUBDESIGN mac_mult_i1i1
( 
	aclr[3..0]	:	input;
	clk[3..0]	:	input;
	dataa[10..0]	:	input;
	datab[8..0]	:	input;
	dataout[19..0]	:	output;
	ena[3..0]	:	input;
	signa	:	input;
	signb	:	input;
) 
VARIABLE 
	dataa_reg[10..0] : dffe;
	datab_reg[8..0] : dffe;
	mult1 : mult_3pl;
	const_node_aclr[3..0]	: NODE;
	const_node_ena[3..0]	: NODE;
	tmp_dataout[19..0]	: WIRE;
	x_dataa[10..0]	: WIRE;
	x_datab[8..0]	: WIRE;
	x_output[19..0]	: WIRE;

BEGIN 
	dataa_reg[].clk = clk[0..0];
	dataa_reg[].d = dataa[];
	datab_reg[].clk = clk[0..0];
	datab_reg[].d = datab[];
	mult1.dataa[] = x_dataa[];
	mult1.datab[] = x_datab[];
	const_node_aclr[] = aclr[];
	dataout[] = tmp_dataout[];
	const_node_ena[] = ena[];
	tmp_dataout[] = (x_output[] & (((signa # (! signa)) # signb) # (! signb)));
	x_dataa[] = ( dataa_reg[].q);
	x_datab[] = ( datab_reg[].q);
	x_output[19..0] = mult1.result[19..0];
END;
--VALID FILE
